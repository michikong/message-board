---------------------------------
2.1 Webアプリケーションとは
---------------------------------
ユーザが HTTP リクエストの4つの CRUD メソッド(POST, GET, PUT, DELETE)を使って、
Web上のリソースを操作できるアプリケーション


---------------------------------
2.2 Web上のリソースとは
---------------------------------
Webページに表示されているもの全て


---------------------------------
2.3 URLとは
---------------------------------
Web上のリソースは、URLによって位置を特定されます。URL(Uniform Resource Locator)のRはリソース
URLはその名の通り、リソースの位置指定のために使用されています。同じ意味としてURIとも呼ばれます。

Webアプリケーションは、URLに対してHTTPリクエストメソッドを送り、リソースを操作できます。

---------------------------------
2.4 Railsとは
---------------------------------
Webアプリケーションを効率的かつ高度に開発できるWebアプリケーションフレームワーク
セキュリティにも気を配られており、安全

---------------------------------
2.5 Webアプリケーションフレームワーク
---------------------------------
Webアプリケーションを作成するときに、土台となるプログラム
Web開発における共通処理をまとめあげたもの
共通処理を書かなくて良いので、労力が削減され効率的に開発できる


▼ライブラリとフレームワークの違い

ライブラリ
ユーザの書いたプログラムによって呼び出される側
ユーザの意思によって取り出す便利な道具

フレームワーク
ユーザの書いたプログラムを呼び出す側
取り出し可能な便利道具という範疇ではなく、
フレームワークという巨大な土台（ルール）の上でユーザプログラムが動く為、
ユーザはフレームワークのルールに沿って開発をしていかねばならない。

---------------------------------
2.6 Railsのリクエストからレスポンス
---------------------------------

Sinatra
軽量級フレームワーク（ルールや機能が少ない）

Rails
重量級フレームワーク（ルールや機能が多い）

MVC
役割分担の構造

・Model
・View
・Controller
の略


それぞれが持つ役割

URLとHTTPメソッドを受け取って Controller に渡すのが、Router（ルータ）
リソース（データ）として振る舞うのが、Model（モデル）
Model を表示・整形する雛形が、View（ビュー）です。多くの場合 HTML
Model や View を制御するのが、Controller（コントローラ）

Rails では Router, Model, View, Controller のそれぞれの役割を考慮しながら開発していきます。

---------------------------------
2.7 Railsでの開発の流れ
---------------------------------
開発順序

1,Model
2,Router
3,ルーティング毎に
   3.1. Controller
   3.2. View

1,Model

重要な Model から着手
Model こそがリソースであり操作対象
作成するWebアプリケーションの扱うデータを決める
まずは操作対象である Model を明確にするところから始める

2,Router
Model が作成されると、どの URL に置くべきか決まる
Router によって Model を置く URL を決定

3.1,Controller
Router が決まると、 Controller が決まる

3.2,View
Controller が決まると、 View が決まる

---------------------------------
2.8 参考資料
---------------------------------
Railsの公式ガイド
https://railsguides.jp/

RailsのAPIドキュメント
Rails の メソッドなどの挙動が全て記載されている
左上の検索欄から調査したいメソッド名などを入力すると、実装コードなどを探し出せる

https://api.rubyonrails.org/





---------------------------------
3. Railsプロジェクトの開始
---------------------------------
---------------------------------
3.1 今回作成するWebアプリケーション
---------------------------------
操作可能なリソースは、メッセージ(Message)のみ

Webアプリ名
メッセージボード

単純な掲示板

デモサイト
http://rails-message-board.herokuapp.com/

メッセージに関係した4つのページを作成します。

・メッセージ一覧ページ（トップページ）
・メッセージ新規作成ページ
・メッセージ詳細ページ
・メッセージ編集ページ


---------------------------------
3.2 Railsのインストール
---------------------------------
$ gem install rails -v 5.2.2

rails のバージョンの確認
$ gem list rails
$ rails --version

rails コマンドのヘルプ文書
$ rails --help

---------------------------------
3.3 Railsプロジェクトの作成コマンド
---------------------------------
$ rails _5.2.2_ new message-board --database=mysql --skip-bundle --skip-test

_5.2.2_
インストールされているRailsの中でバージョン 5.2.2 のRailsを使ってプロジェクトを作成する旨を指定

--database=mysql
作成する Rails プロジェクトで使用するデータベースは mysql だと指定

--skip-bundle
bundle install を初回実行しないことを意味する

--skip-test
自動テスト機能を使用しないことを指定

---------------------------------
3.4 Bundler
---------------------------------
Ruby や Rails のプロジェクトで使用するライブラリの管理ツール

Gemfile というファイルにインストールしたいライブラリ名と必要なバージョンの一覧を全て書き出し、 
bundle install で一気にそれらのライブラリをインストールすることができるようになる
プロジェクト毎の Gemfile に必要なライブラリ一覧を書き込むことで、
そのプロジェクトに使用するライブラリを明示・列挙できる点も利点

つまり、bundle install の1コマンドで、Gemfile 通りにライブラリ環境を構築してくれるツール


Gemfile
Bundler で管理するライブラリ一覧は、Gemfile ファイルを見ればわかるようになっています
Gemfile の中に新たに加えたいライブラリを記述して、 bundle install とコマンドを実行すれば、インストールされる


Gemfile.lock 
依存ライブラリも含めた、現在利用しているライブラリの全てがバージョン情報なども含めて記載されている

---------------------------------
3.5 ファイル構成
---------------------------------

rails new message-board --database=mysql --skip-bundle --skip-test
コマンドで作成されたファイルやフォルダ

ファイル/フォルダ	目的
.git/	         Gitのバージョン管理に関連したフォルダ
app/	         アプリケーションのメインフォルダ（後に説明するコントローラ、モデル、ビューなど）
bin/	         コード生成やサーバー起動に利用するスクリプト
config/        アプリケーション本体、ルーティングなどの設定情報
db/            データベース本体やスキーマ（データベースの構造）情報、マイグレーションファイルなど
lib/	         自作のライブラリなど
log/	         ログの出力先
public/        公開フォルダ
tmp/	         一時ファイル
vendor/	      サードパーティのコード
.gitignore	   Rails プロジェクトのための .gitignore
.ruby-version	Rubyのバージョンが記載されているテキストファイル
config.ru	   サーバーの起動に使用
Gemfile
Gemfile.lock	必要なgemライブラリを定義
Rakefile	      ターミナルから実行可能なタスク
package.json	フロントエンドの開発に役立つnpm関連のライブラリを定義
README.md	   readmeファイル


レッスンで扱うフォルダやファイルのは下記の通り


app/assets/
app/controllers/
app/helpers/
app/models/
app/views/
config/database.yml
config/routes.rb
db/
Gemfile

---------------------------------
3.6 bundle install の実行
---------------------------------
Rails プロジェクトを rails new コマンドで作成すると、
通常は自動的に bundle install が実行されるようになっています。
今回は bundle install の意味を理解してから皆さんに意識的に実行してもらいたかったので、
--skip-bundle という Rails プロジェクト作成直後に勝手に bundle install しないオプションを付けました。
今後、rails new するときは --skip-bundle は不要

Gemfile の確認
bundle install を実行する前に、Gemfile を確認
Gemfile に書かれたものがインストールされる


gemfile

gem 'ライブラリ名', 'バージョン指定'

# バージョン 5.2.x の内、最新をインストールする
gem 'rails', '~> 5.2.2'

# バージョン 0.4.4 以上で 0.6.0 未満の中で、最新のライブラリをインストールする
gem 'mysql2', '>= 0.4.4', '< 0.6.0'

# 最新のライブラリをインストールする（バージョン指定無し）
gem 'spring'


group のブロック

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end

:development と :test 環境で使用するライブラリを指定している

通常、開発者がCloud9などで開発をしているときにRailsアプリケーションを起動すると 
:development 環境として起動することになります。

今後 Heroku などに本番環境として Web を公開すると
:production 環境として Rails アプリケーションが起動します。ここでは一旦意識する必要なし。


bundle install の実行

$ cd message-board/
$ bundle install

---------------------------------
3.7 Git
---------------------------------

---------------------------------
3.8 REPL
---------------------------------
REPL とは
REPLとは、 Read-eval-print loop の略で、
「読み込み-処理-表示」の繰り返しという意味になります。対話型のRuby実行環境のことです。

Ruby の REPL
ターミナルで下記のコマンドを入力すると、Ruby の REPL が起動
$ irb


Rails の REPL
irb コマンドで Ruby を対話的に実行できました
しかし、 Ruby の REPL を起動しても、 Rails の機能は利用できません。
Rails では rails c というコマンドを実行すると、Rails の機能を REPL が起動します。c は console の略

irb と rails c との違い
Rails ファイルが読み込まれるかどうか
irb としただけでは、 Rails ファイルが読み込まれず Rails を使ったRubyオブジェクトを利用できない
Rails プロジェクトでは rails console を起動して REPL を起動するように



rails console 起動
下記のコマンドで実際に起動してみてください。

$ rails c


コードを変更したら reload! する
先に言っておきますが、Rails 上の Ruby コードを変更すると rails console で、 
reload! コマンドを実行しないと再変更後の Ruby コードは反映されません。

2.5.3 :001:0> reload!


---------------------------------
4. データベースとRailsの接続設定
---------------------------------
Model の作成を始める前に、 Rails アプリケーションとデータベースの接続
データベースを接続しないと、 Model の保存場所がない。
Model はデータベースと密接に関わっており、データベースのレコードやカラムを参照する。

まずはサーバを起動

---------------------------------
4.1 サーバの起動
---------------------------------

Rails のコマンドによってサーバを起動

プロジェクトフォルダ(message-board/)にて、
$ rails s

---------------------------------
4.2 エラーの発生
---------------------------------

エラータイトル: Mysql2::Error::ConnectionError

mysql2 の Gem からエラーは発せられている
データベースとの連携でエラーが出ていることを予想


エラーメッセージ: Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock'

MySQLサーバに接続できないと言っています。これは MySQL サーバが起動していないことが原因

# MySQLを起動する
$ sudo service mysqld start


エラータイトル: Activerecord::NoDatabaseError

NoDatabaseError
データベースが無い

エラーメッセージ: Unknown database 'message-board_development

'message-board_development' のデータベース名で作成すれば良さそうだと予想できる

---------------------------------
4.3 データベースの作成
---------------------------------
rails db:create というコマンドが用意されているので、そちらを使用

# DBを作成(mysqlを起動した状態で)
$ rails db:create

---------------------------------
4.5 MySQL 連携の設定ファイルの確認
---------------------------------

Rails と MySQLの連携の設定をしているファイルを確認

Railsのデータベース接続設定を管理しているファイル

config/database.yml 

        default: &default
          adapter: mysql2
          encoding: utf8
          pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
          username: root
          password:
          host: localhost
        
        development:
          <<: *default
          database: message-board_development
        
        production:
          <<: *default
          database: message-board_production
          username: message-board
          password: <%= ENV['MESSAGE-BOARD_DATABASE_PASSWORD'] %>
          
          
          設定内容	                    説明
default: &default	                    設定を default という名前で共通化する
   adapter: mysql2	                    mysql2 に接続することを明示
   encoding: utf8	                    文字コードは utf8 で接続
   pool: ...(省略)...	                ユーザ接続数の上限（あまり気にしなくて良い）
   username: root	                    MySQL 接続時のユーザ名
   password:	                        MySQL 接続時のパスワード
   host: localhost	                    MySQL のあるサーバ
development:	                        開発環境上でのデータベース設定
   <<: *default	                        共通化された default が読み込まれる
   database: message-board_development	データベース名を明示
production:	                            本番上でのデータベース設定（後ほど Heroku 環境で使用）
   <<: *default	                        共通化された default が読み込まれる
   database: message-board_production	データベース名の明示
   username: message-board	            MySQL 接続時のユーザ名
   password: <%= ENV['MESSAGE-          MySQL 接続時のパスワード
   BOARD_DATABASE_PASSWORD'] %>	
   
   ENV['MESSAGE-BOARD_DATABASE_PASSWORD']
   ↑これはMESSAGE-BOARD_DATABASE_PASSWORD の環境変数を読み込んでいる。
   

この設定を Rails がサーバ起動時に読み込むことによって、 Rails と MySQL の接続が確立（連携）

# 環境変数の値を確認
$ echo $IP
$ echo $PORT

# Cloud9 上で設定されている環境変数を全て確認
$ env

Rails サーバ起動中は環境変数は全て ENV の中に入っている。


# rails consoleで環境変数を確認
$ rails c

> p ENV


---------------------------------
5. Model
---------------------------------

開発の流れで宣言した通り、リソース（操作対象）となる Model から作成
Model はリソースであり操作対象

最初に今から作成するWebアプリケーションは
どんなデータを扱うのか を決めなければいけません。
なんとなく開発を開始するのではなく、
何のためのWebアプリケーションなのかを決め、
そしてそのためにどんなデータを扱う必要があるのか考えておく必要があります。


開発は Model の作成からスタート


---------------------------------
5.1 Model を作成する
---------------------------------

下記コマンドで、Message モデルを作成します。
Message は content というメッセージ内容（文字列）を持つようにします。

$ rails g model Message content:string

---------------------------------
5.2 メッセージのテーブル設計
---------------------------------

マイグレーションの実行
# message-board_development データベースに messages テーブルを作成
$ rails db:migrate

# 追加のマイグレーションファイルを更に生成します（例えばあるテーブルのカラムを削除するなど）。
$ rails generate migration...

# マイグレーションファイルが既にデータベースに反映されているかの確認
$ rails db:migrate:status

# データベースを一度削除
$ rails db:migrate:reset

# 再構築
$ rails db:migrate


マイグレーションの確認

# MySQL ログイン
$ mysql -u root

# データベースの選択
mysql> use message-board_development

# テーブル一覧確認（messagesテーブルが作成されているか確認）
mysql> show tables;

# テーブル設計の確認
mysql> describe messages;

---------------------------------
5.3 モデルクラスの作成
---------------------------------

# マイグレーションファイルとモデルファイルを生成
$ rails g model Message content:string

モデルファイル
app/models/message.rb

    class Message < ApplicationRecord
    end
    

Message クラスは ApplicationRecord クラスを継承している


ApplicationRecord クラスが定義されたファイル
app/models/application_record.rb

    class ApplicationRecord < ActiveRecord::Base
      self.abstract_class = true
    end
    
    
ApplicationRecord が更に ActiveRecord::Base を継承

ActiveRecord::Base のコードに、 include ..., extend ... が大量にあり、
これによってモデル操作の基本機能が実装されている。
そのため、ActiveRecord::Base → ApplicationRecord という順番でクラスを継承した Message モデルには、
それらの機能が全て継承されており、
Message クラスにコードが無くてもモデル操作できるようになっている。

---------------------------------
5.4 Modelで使用するCRUD用メソッド一覧
---------------------------------

Message モデルの CRUD 操作


メソッド名	    用途
all	            全てのレコードを取得する
new	            新規レコードのためのモデルインスタンスを作成する
find	        idを指定して検索
find_by	        id以外でも指定して検索
where	        検索条件を文字列、配列、ハッシュのいずれかの方法で与えることができる
first	        最初のレコードを1件だけ取得する
save	        レコードの作成
update, save	データの更新
destroy	        データの削除

---------------------------------
5.5 rails consoleでモデルのCRUD操作
---------------------------------


# all
複数のレコードを取得するメソッド
レコード全体を取得する
> messages = Message.all


# first
最初のレコードのインスタンスを1つだけ返す
first だけでなく、 second や third なども使用できる
> message = Message.first


# find
id から単一のレコードを検索し返すメソッド
id: 1 が検索され1つだけ取得されている
> message = Message.find(1)


# find_by
find と違って id 以外でも単純な条件で検索可能
> message = Message.find_by(content: 'sample1')


# where
条件指定をしてレコードを検索
where(A: B) となっていた場合は、 A = B として条件が設定される
> messages = Message.where(content: 'sample1')

A: B 形式ではなく、文字列で条件を書くことで演算子 (>= 等) を書くことも可能
> messages = Message.where('id >= 2')

重要
messages = ... と複数形の変数で書いてある通り、all と同じく複数レコードが代入される
first や find, find_by は LIMIT 1 の SQL がつくので必ず単一のレコードが取得される

first と組み合わせることで、単一のレコードを得ることも可能
> message = Message.where('id >= 2').first


# レコードの更新 (Update)
レコードを一気に更新させるときは、find などでレコード（モデルのインスタンス）を取得したあとに、
そのインスタンスに対して値を再代入し、save するのが通常です。
> message = Message.first
> message.content = 'おはよう'
> message.save

# 上記を一気に行う update
> message = Message.first
> message.update(content: 'こんばんは')

# レコードの削除 (Delete)
> message = Message.first
> message.destroy

---------------------------------
5.6 まとめ
---------------------------------
Webアプリケーションでは Model が最も大事
Model の CRUD 用メソッドを使って、しっかりレコードの CRUD をできるように
実際の開発でも、 rails console 上で Model を操作したり動作確認することが多い
rails console にも充分慣れておく。

---------------------------------
5.7 Git
---------------------------------
# ステータス取得
$ git status

# 差分確認
$ git diff

# バージョン管理の対象として追加
$ git add .

# ファイルの変更をgitレポジトリに保存
$ git commit -m 'message model'



---------------------------------
6. RouterとControllerとViewの開発の概要
---------------------------------
---------------------------------
6.1 Router と Controller と View の関係
---------------------------------

Router
URL のルーティングを一元管理を担当しているものです。したがって、 Router として機能している config/routes.rb の1ファイルだけ見れば、このWebアプリケーションのルーティングを全て把握することができます。そして、ルーティングこそがこのWebアプリケーションの全ての機能リストでもあります。ルーティングの把握をおろそかにしないでください。

Controller
ユーザから送信されてきた HTTP リクエストの処理を担当するものです。 HTTP リクエストは Router から Controller の1つのメソッドに割り当てられます。 Router と対応している Controller のメソッドのことをアクションと呼びます。 Controller は HTTP リクエストに対応した Model の取得や作成、保存などを行います。

View
Controller が HTTP リクエストを処理し終えて、最終的に HTTP レスポンスとして返す Web ページです。全ては Web 上でのアプリケーションなので、最後には、Web ページの表示という形でユーザに見えないとどうなったのか結果がわかりません。 View はユーザに向けて結果をお知らせするためのものです。 View には Controller によって選択された適切な Model が埋め込まれます。

---------------------------------
6.2 Router と Controller と View の開発の流れ
---------------------------------

絶対的な一連の流れ

HTTP リクエストは、入り口である Router を通り
Router によって設定された Controller のアクションを通り
Controller のアクションに対応した名前の View を HTTP レスポンスとして返す



---------------------------------
7. Router
---------------------------------
---------------------------------
7.1 リソースに対する CRUD のための4つのルーティング
---------------------------------

リソース1つの CRUD に対応する HTTP リクエストのメソッド

GET (Read)
POST (Create)
PUT (Update)
DELETE (Delete)

これに対応するルーティング

config/routes.rb
    
    Rails.application.routes.draw do
      get 'messages/:id', to: 'messages#show'
      post 'messages', to: 'messages#create'
      put 'messages/:id', to: 'messages#update'
      delete 'messages/:id', to: 'messages#destroy'
    end
    
:id について
get, put, delete はどのレコードを操作するのかを明示する必要があるので、 
URL に id が入れられることになる。
/messages/1 という URL に対して GET メソッドのリクエストを送ると、
id: 1 な Message を表示することになる。

POST の場合だけは別で、 id が不要
そもそも新規作成のメソッドなので、id はまだ用意されていない。
/messages に POST メソッドでリクエストを送ると、新規作成される。


messages#show というように Controller名 # アクション名 という形で表記
アクション名に show, create, update, destroy とここでは書いていますが、任意のアクション名が設定できる。
だが、Rails 側が show, create, update, destroy という命名を基本としているので、それに従うのがベター
index, new, edit も同様に Rails 側が基本としているアクションの命名規則



---------------------------------
7.2 CRUDのための残り3つの補助ページ
---------------------------------
詳細ページ(show)にアクセスするには、一覧ページ(index)が必要
  get 'messages/:id', to: 'messages#show'
  
詳細ページ(show)のルーティング
このページにアクセスするにはまずリソースの一覧ページがないと、
個別のリソースページである詳細ページへ（直接 URL を入力するしか）辿り着けない。
その為、一覧ページ(index)を付け加える


保存アクション(create)にデータを送るには、新規作成用のフォームページ(new)が必要
  post 'messages', to: 'messages#create'

保存アクション(create)
このアクションを起こすときには必ずなんらかのデータを渡す必要があります。
そのために使われるのが入力フォーム
そのため、新規作成用のフォームページ(new)を追加。


更新アクション(update)にデータを送るには、更新用のフォームページ(edit)が必要
  put 'messages/:id', to: 'messages#update'
  
更新アクション(update)
このアクションを起こすときには必ずなんらかのデータを渡す必要があります。
そのために使われるのが入力フォーム
更新用のフォームページ(edit)を追加。



config/routes.rb

   # index: show の補助ページ
   get 'messages', to: 'messages#index'

   # new: 新規作成用のフォームページ
   get 'messages/new', to: 'messages#new'
   
   # edit: 更新用のフォームページ
   get 'messages/:id/edit', to: 'messages#edit'
   
   

削除アクション(delete)を起こすには、ボタンがあれば大丈夫
削除アクションは、フォームにデータが不要なので、index, show, edit ページのどこかに
削除ボタンが設置してあればそれで事足ります。
そのため、削除のためのページは不要


---------------------------------
7.3 7つの基本ルーティングの省略形
---------------------------------

config/routes.rb
    
    Rails.application.routes.draw do
      resources :messages
    end
    
---------------------------------
7.4 Router の完成
---------------------------------

config/routes.rb 完成
    
    Rails.application.routes.draw do
      root to: 'messages#index'
    
      resources :messages
    end
    
---------------------------------
7.5 Router の確認
---------------------------------
config/routes.rb を見れば、その Web アプリケーションでアクセス可能な URL は全てわかる。
config/routes.rb では少し込み入ったコーディングも可能


# 現状のルーティングを全て列挙する便利コマンド
$ rails routes
ルーティング一覧を確認することができる。

例)
      Prefix Verb   URI Pattern                  Controller#Action
        root GET    /                            messages#index
    messages GET    /messages(.:format)          messages#index
             POST   /messages(.:format)          messages#create
 new_message GET    /messages/new(.:format)      messages#new
edit_message GET    /messages/:id/edit(.:format) messages#edit
     message GET    /messages/:id(.:format)      messages#show
             PATCH  /messages/:id(.:format)      messages#update
             PUT    /messages/:id(.:format)      messages#update
             DELETE /messages/:id(.:format)      messages#destroy
             
             
root to: 'messages#index', resources :messages がちゃんと展開されているのを確認できる。
PATCH は UPDATE メソッドのためのもの
PUT は同じ

RESTful

7つの基本アクション(index, show, new, create, edit, update, destroy)


---------------------------------
8. Controller と View
---------------------------------
Controller と View は密接に関わる

---------------------------------
8.1 Controller の生成
---------------------------------

# Controller の生成コマンド
$ rails g controller コントローラ名

g は generate
コントローラ名は モデルの複数形 を記述
Message モデルに対するコントローラであれば、ここには Messages と記述

# オプションを追加して、下記のコマンドによって MessagesController を生成
$ rails g controller Messages --no-helper --no-assets

--no-helper, --no-assets は Helper と CSS と JavaScript を自動生成しないオプション

上記コマンドで下記のログが出力

      create  app/controllers/messages_controller.rb
      invoke  erb
      create    app/views/messages
      
      
      
Expected ... もログで表示されているかも
自動生成オプションに関するログなので重要ではない。

app/controllers/messages_controller.rb と app/views/messages が生成
invoke erb は ERB 関連
app/views/messages は ERB 関連
後ほど、 app/views/messages/ フォルダには ERB ファイルを追加していくことになる。

生成された app/controllers/messages_controller.rb を確認

app/controllers/messages_controller.rb
    
    class MessagesController < ApplicationController
    end
    
継承関係が続いています。これらの継承によって Controller としての基本機能が提供されています。

---------------------------------
8.2 Controller を RESTful なルーティングに対応させる
---------------------------------
config/routes.rb で設定したルーティングに対応したアクションを 
messages_controller.rb に追加
resources :messages で指定した下記の RESTful なルーティングに対応するように 
messages_controller.rb に追記

---------------------------------
8.3 View の構成について
---------------------------------
作成

app/views/messages/index.html.erb
app/views/messages/show.html.erb
app/views/messages/new.html.erb
app/views/messages/edit.html.erb

index.html.erb のように .erb だけでなく、.html と入れている理由
ERB ファイルが HTML ファイルへと変換されることを Rails に対して明示するため

ERB
HTML だけでなく、単純なテキストファイル (.text) でも使用できる、汎用的な Ruby コード埋め込み形式

例えば、メールを送るときにテキスト形式のメールか HTML 形式のメールかを明示するときに、
filename.text.erb などとして使用

拡張子の順番は .html.erb である必要がある。



View(ERB) は、基本的には HTML を記述


app/views/laytous/application.html.erb
    
    
    <!DOCTYPE html>
    <html>
      <head>
        <title>MessageBoard</title>
        <%= csrf_meta_tags %>
        <%= csp_meta_tag %>
    
        <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
        <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
      </head>
    
      <body>
        <%= yield %>
      </body>
    </html>

# セキュリティ対策用のコード
csrf_meta_tags と csp_meta_tag

# CSS を読み込むためのコード
stylesheet_link_tag ... 

# JavaScript を読み込むためのコード
javascript_include_tag ... 


重要

body要素内の <%= yield %>
body要素内に埋め込まれるページが切り替わる
<%= yield %> があるところ（つまりbody要素内）に 
index.html.erb や show.html.erb などの各ページの内容が代入される

/messages というルーティングにブラウザでアクセス
↓
MessageController の index アクションが呼び出され
↓
app/views/layouts/application.html.erb が呼び出され
↓
<%= yield %>の所にapp/views/messages/index.html.erb の内容が代入


<%= yield %> のおかげで、body要素内以外は共通化
body要素内はアクセスされたページ毎のコンテンツが切り替えられて表示される



---------------------------------
8.4 messages#index
---------------------------------

 index アクションに対応する Controller と View を開発
 
 Controller
 
 index アクションの役割
 Message モデルのレコードの一覧表示
 
 
 Message.all 
 Message のレコードを全て取得

---------------------------------
8.5 messages#show
---------------------------------


index から show へのリンクを追加する

app/views/messages/index.html.erb

    
    <h1>メッセージ一覧</h1>
    
    <ul>
      <% @messages.each do |message| %>
        <li><%= link_to message.id, message %> : <%= message.content %></li>
      <% end %>
    </ul>


link_to

Rails が提供する便利メソッドで、
link_to 表示文字列, リンク先 
という形で記述します。ここでは、表示文字列 は message.id つまりメッセージの id であり、
リンク先 は message となっています。リンク先 として message のように Model の
インスタンス（レコード）を渡すと、自動的にそのインスタンスの show アクションへとリンクされるようになります。
省略せずに書くと message_path(message) となり、リンク先 にこう記述しても正常に動作します。 
message も message_path(message) もどちらも最終的に /messages/1 など
/messages/:id の形の URL を生成しているだけです。


$ rails routes

      Prefix Verb   URI Pattern                  Controller#Action
    messages GET    /messages(.:format)          messages#index
             POST   /messages(.:format)          messages#create
 new_message GET    /messages/new(.:format)      messages#new
edit_message GET    /messages/:id/edit(.:format) messages#edit
     message GET    /messages/:id(.:format)      messages#show
             PATCH  /messages/:id(.:format)      messages#update
             PUT    /messages/:id(.:format)      messages#update
             DELETE /messages/:id(.:format)      messages#destroy
             
             
             
ルーティング	        リンク生成メソッドの使用例	   生成されるリンク
index	                messages_path	                /messages
show	                message_path(@message)	        /messages/1 など
new	                    new_message_path	            /messages/new
edit	                edit_message_path(@message)	    /messages/1/edit など


---------------------------------
8.6 messages#new
---------------------------------


new アクション

POST メソッドを送信する新規作成用の入力フォーム置き場

Messageモデルのためのフォームなので
@message = Message.new でインスタンスを作成


ERB にフォームを設置

form_withについて

---------------------------------
8.7 messages#create
---------------------------------
create アクション
new のページから送信されるフォームを処理

---------------------------------
8.8 messages#edit
---------------------------------
edit アクション
new アクションと似ています
だが、既存のメッセージレコードを編集することになるので、
id でメッセージレコードを検索することになります

params[:id]による検索は show アクションと全く同じ


@message = Message.find(params[:id])
@message には content が最初から入っている

---------------------------------
8.9_messages#update
---------------------------------

update は create に似ている。
id で検索するところ

app/controllers/messages_controller.rb

  def update
    @message = Message.find(params[:id])

    if @message.update(message_params)
      flash[:success] = 'Message は正常に更新されました'
      redirect_to @message
    else
      flash.now[:danger] = 'Message は更新されませんでした'
      render :edit
    end
  end
  
リダイレクトしているので、 View は不要

---------------------------------
8.10 messages#destroy
---------------------------------
app/controllers/messages_controller.rb

  def destroy
    @message = Message.find(params[:id])
    @message.destroy

    flash[:success] = 'Message は正常に削除されました'
    redirect_to messages_url
  end
  
  
リダイレクトしているので View は不要
ただし、削除するためのリンクは設置する必要があるので、 show.html.erb に削除リンクを設置

app/views/messages/show.html.erb

    <h1>id: <%= @message.id %> のメッセージ詳細ページ</h1>
    
    <p><%= @message.content %></p>
    
    <%= link_to '一覧に戻る', messages_path %>
    <%= link_to 'このメッセージを編集する', edit_message_path(@message) %>
    <%= link_to 'このメッセージを削除する', @message, method: :delete, data: { confirm: '本当に削除してよろしいですか？' }
    
    
    