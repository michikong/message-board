---------------------------------
2.1 Webアプリケーションとは
---------------------------------
ユーザが HTTP リクエストの4つの CRUD メソッド(POST, GET, PUT, DELETE)を使って、
Web上のリソースを操作できるアプリケーション


---------------------------------
2.2 Web上のリソースとは
---------------------------------
Webページに表示されているもの全て


---------------------------------
2.3 URLとは
---------------------------------
Web上のリソースは、URLによって位置を特定されます。URL(Uniform Resource Locator)のRはリソース
URLはその名の通り、リソースの位置指定のために使用されています。同じ意味としてURIとも呼ばれます。

Webアプリケーションは、URLに対してHTTPリクエストメソッドを送り、リソースを操作できます。

---------------------------------
2.4 Railsとは
---------------------------------
Webアプリケーションを効率的かつ高度に開発できるWebアプリケーションフレームワーク
セキュリティにも気を配られており、安全

---------------------------------
2.5 Webアプリケーションフレームワーク
---------------------------------
Webアプリケーションを作成するときに、土台となるプログラム
Web開発における共通処理をまとめあげたもの
共通処理を書かなくて良いので、労力が削減され効率的に開発できる


▼ライブラリとフレームワークの違い

ライブラリ
ユーザの書いたプログラムによって呼び出される側
ユーザの意思によって取り出す便利な道具

フレームワーク
ユーザの書いたプログラムを呼び出す側
取り出し可能な便利道具という範疇ではなく、
フレームワークという巨大な土台（ルール）の上でユーザプログラムが動く為、
ユーザはフレームワークのルールに沿って開発をしていかねばならない。

---------------------------------
2.6 Railsのリクエストからレスポンス
---------------------------------

Sinatra
軽量級フレームワーク（ルールや機能が少ない）

Rails
重量級フレームワーク（ルールや機能が多い）

MVC
役割分担の構造

・Model
・View
・Controller
の略


それぞれが持つ役割

URLとHTTPメソッドを受け取って Controller に渡すのが、Router（ルータ）
リソース（データ）として振る舞うのが、Model（モデル）
Model を表示・整形する雛形が、View（ビュー）です。多くの場合 HTML
Model や View を制御するのが、Controller（コントローラ）

Rails では Router, Model, View, Controller のそれぞれの役割を考慮しながら開発していきます。

---------------------------------
2.7 Railsでの開発の流れ
---------------------------------
開発順序

1,Model
2,Router
3,ルーティング毎に
   3.1. Controller
   3.2. View

1,Model

重要な Model から着手
Model こそがリソースであり操作対象
作成するWebアプリケーションの扱うデータを決める
まずは操作対象である Model を明確にするところから始める

2,Router
Model が作成されると、どの URL に置くべきか決まる
Router によって Model を置く URL を決定

3.1,Controller
Router が決まると、 Controller が決まる

3.2,View
Controller が決まると、 View が決まる

---------------------------------
2.8 参考資料
---------------------------------
Railsの公式ガイド
https://railsguides.jp/

RailsのAPIドキュメント
Rails の メソッドなどの挙動が全て記載されている
左上の検索欄から調査したいメソッド名などを入力すると、実装コードなどを探し出せる

https://api.rubyonrails.org/





---------------------------------
3. Railsプロジェクトの開始
---------------------------------
---------------------------------
3.1 今回作成するWebアプリケーション
---------------------------------
操作可能なリソースは、メッセージ(Message)のみ

Webアプリ名
メッセージボード

単純な掲示板

デモサイト
http://rails-message-board.herokuapp.com/

メッセージに関係した4つのページを作成します。

・メッセージ一覧ページ（トップページ）
・メッセージ新規作成ページ
・メッセージ詳細ページ
・メッセージ編集ページ


---------------------------------
3.2 Railsのインストール
---------------------------------
$ gem install rails -v 5.2.2

rails のバージョンの確認
$ gem list rails
$ rails --version

rails コマンドのヘルプ文書
$ rails --help

---------------------------------
3.3 Railsプロジェクトの作成コマンド
---------------------------------
$ rails _5.2.2_ new message-board --database=mysql --skip-bundle --skip-test

_5.2.2_
インストールされているRailsの中でバージョン 5.2.2 のRailsを使ってプロジェクトを作成する旨を指定

--database=mysql
作成する Rails プロジェクトで使用するデータベースは mysql だと指定

--skip-bundle
bundle install を初回実行しないことを意味する

--skip-test
自動テスト機能を使用しないことを指定

---------------------------------
3.4 Bundler
---------------------------------
Ruby や Rails のプロジェクトで使用するライブラリの管理ツール

Gemfile というファイルにインストールしたいライブラリ名と必要なバージョンの一覧を全て書き出し、 
bundle install で一気にそれらのライブラリをインストールすることができるようになる
プロジェクト毎の Gemfile に必要なライブラリ一覧を書き込むことで、
そのプロジェクトに使用するライブラリを明示・列挙できる点も利点

つまり、bundle install の1コマンドで、Gemfile 通りにライブラリ環境を構築してくれるツール


Gemfile
Bundler で管理するライブラリ一覧は、Gemfile ファイルを見ればわかるようになっています
Gemfile の中に新たに加えたいライブラリを記述して、 bundle install とコマンドを実行すれば、インストールされる


Gemfile.lock 
依存ライブラリも含めた、現在利用しているライブラリの全てがバージョン情報なども含めて記載されている

---------------------------------
3.5 ファイル構成
---------------------------------

rails new message-board --database=mysql --skip-bundle --skip-test
コマンドで作成されたファイルやフォルダ

ファイル/フォルダ	目的
.git/	         Gitのバージョン管理に関連したフォルダ
app/	         アプリケーションのメインフォルダ（後に説明するコントローラ、モデル、ビューなど）
bin/	         コード生成やサーバー起動に利用するスクリプト
config/        アプリケーション本体、ルーティングなどの設定情報
db/            データベース本体やスキーマ（データベースの構造）情報、マイグレーションファイルなど
lib/	         自作のライブラリなど
log/	         ログの出力先
public/        公開フォルダ
tmp/	         一時ファイル
vendor/	      サードパーティのコード
.gitignore	   Rails プロジェクトのための .gitignore
.ruby-version	Rubyのバージョンが記載されているテキストファイル
config.ru	   サーバーの起動に使用
Gemfile
Gemfile.lock	必要なgemライブラリを定義
Rakefile	      ターミナルから実行可能なタスク
package.json	フロントエンドの開発に役立つnpm関連のライブラリを定義
README.md	   readmeファイル


レッスンで扱うフォルダやファイルのは下記の通り


app/assets/
app/controllers/
app/helpers/
app/models/
app/views/
config/database.yml
config/routes.rb
db/
Gemfile

---------------------------------
3.6 bundle install の実行
---------------------------------
Rails プロジェクトを rails new コマンドで作成すると、
通常は自動的に bundle install が実行されるようになっています。
今回は bundle install の意味を理解してから皆さんに意識的に実行してもらいたかったので、
--skip-bundle という Rails プロジェクト作成直後に勝手に bundle install しないオプションを付けました。
今後、rails new するときは --skip-bundle は不要

Gemfile の確認
bundle install を実行する前に、Gemfile を確認
Gemfile に書かれたものがインストールされる


gemfile

gem 'ライブラリ名', 'バージョン指定'

# バージョン 5.2.x の内、最新をインストールする
gem 'rails', '~> 5.2.2'

# バージョン 0.4.4 以上で 0.6.0 未満の中で、最新のライブラリをインストールする
gem 'mysql2', '>= 0.4.4', '< 0.6.0'

# 最新のライブラリをインストールする（バージョン指定無し）
gem 'spring'


group のブロック

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end

:development と :test 環境で使用するライブラリを指定している

通常、開発者がCloud9などで開発をしているときにRailsアプリケーションを起動すると 
:development 環境として起動することになります。

今後 Heroku などに本番環境として Web を公開すると
:production 環境として Rails アプリケーションが起動します。ここでは一旦意識する必要なし。


bundle install の実行

$ cd message-board/
$ bundle install

---------------------------------
3.7 Git
---------------------------------

---------------------------------
3.8 REPL
---------------------------------
REPL とは
REPLとは、 Read-eval-print loop の略で、
「読み込み-処理-表示」の繰り返しという意味になります。対話型のRuby実行環境のことです。

Ruby の REPL
ターミナルで下記のコマンドを入力すると、Ruby の REPL が起動
$ irb


Rails の REPL
irb コマンドで Ruby を対話的に実行できました
しかし、 Ruby の REPL を起動しても、 Rails の機能は利用できません。
Rails では rails c というコマンドを実行すると、Rails の機能を REPL が起動します。c は console の略

irb と rails c との違い
Rails ファイルが読み込まれるかどうか
irb としただけでは、 Rails ファイルが読み込まれず Rails を使ったRubyオブジェクトを利用できない
Rails プロジェクトでは rails console を起動して REPL を起動するように



rails console 起動
下記のコマンドで実際に起動してみてください。

$ rails c


コードを変更したら reload! する
先に言っておきますが、Rails 上の Ruby コードを変更すると rails console で、 
reload! コマンドを実行しないと再変更後の Ruby コードは反映されません。

2.5.3 :001:0> reload!
